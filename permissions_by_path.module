<?php

/**
 * @file
 * Main module file for Permissions by Path.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_form_alter().
 */
function permissions_by_path_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('permissions_by_path.settings');
  if (!$config->get('module_enable')) {
    return;
  }

  $current_user = \Drupal::currentUser();
  $user = \Drupal\user\Entity\User::load($current_user->id());
  $username = $user ? $user->getAccountName() : '';
  $user_roles = $current_user->getRoles();

  // Super admin (uid 1) is always unaffected.
  if ($current_user->id() == 1) {
    return;
  }

  // Only affect users with at least one affected role.
  $affected_roles = (array) $config->get('affected_roles');
  $is_affected = (bool) array_intersect($user_roles, $affected_roles);
  if (!$is_affected) {
    return;
  }

  // Build the list of paths this user has access to.
  $user_paths = [];
  $path_permissions = $config->get('path_permissions') ?: [];
  foreach ($path_permissions as $mapping) {
    if (!empty($mapping['path']) && !empty($mapping['users']) && in_array($username, $mapping['users'], TRUE)) {
      $user_paths[] = $mapping['path'];
    }
  }

  // Get affected content types.
  $affected_node_forms = (array) $config->get('affected_node_forms');
  $create_node_forms = [];
  $edit_node_forms = [];
  $delete_node_forms = [];
  foreach ($affected_node_forms as $type) {
    $create_node_forms[] = "node_{$type}_form";
    $edit_node_forms[] = "node_{$type}_edit_form";
    $delete_node_forms[] = "node_{$type}_delete_form";
  }

  // Helper: List of accessible paths as a string.
  $list_of_paths = implode(' - ', $user_paths);

  // Add warning and validation for node create forms.
  if (in_array($form_id, $create_node_forms) && !$form_state->isSubmitted()) {
    if ($user_paths) {
      $list_of_paths = '<ul>';
      foreach ($user_paths as $allowed_path) {
        $list_of_paths .= '<li><strong>' . $allowed_path . '/</strong><i>new_page_name</i></li>';
      }
      $list_of_paths .= '</ul>';

      $warning_message = Markup::create(
        '<strong>Attention: URL Alias Guidelines</strong><br>' .
        'Hello <strong>' . $username . '</strong>, when creating a new page, please ensure that the URL alias follows the correct format. You are only permitted to create or edit pages with URL aliases that begin with:' . $list_of_paths
      );
      \Drupal::messenger()->addWarning($warning_message);
    }
    $form['#validate'][] = 'permissions_by_path_form_validate';
  }

  // Restrict access for node edit forms.
  elseif (in_array($form_id, $edit_node_forms)) {
    $path = \Drupal::service('path.current')->getPath();
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath(str_replace('/edit', '', $path), $langcode);

    $has_access = FALSE;
    foreach ($user_paths as $allowed_path) {
      if (strpos($path_alias, $allowed_path) === 0) {
        $has_access = TRUE;
        break;
      }
    }

    if (!$has_access) {
      $redirect = new RedirectResponse(Url::fromUserInput('/permissions_by_path_notice')->toString());
      $redirect->send();
    }
    else {
      if ($user_paths) {
        $list_of_paths_html = '<ul>';
        foreach ($user_paths as $allowed_path) {
          $list_of_paths_html .= '<li><strong>' . $allowed_path . '/</strong><i>page_name</i></li>';
        }
        $list_of_paths_html .= '</ul>';

        $edit_warning_message = Markup::create(
          '<strong>Attention: URL Alias Guidelines</strong><br>' .
          'Hello <strong>' . $username . '</strong>, you have access to edit this page. If you change the URL alias, please ensure it starts with one of the following:' . $list_of_paths_html
        );
        \Drupal::messenger()->addWarning($edit_warning_message);
      }
      $form['#validate'][] = 'permissions_by_path_form_validate';
    }
  }

  // Restrict access for node delete forms.
  elseif (in_array($form_id, $delete_node_forms)) {
    $path = \Drupal::service('path.current')->getPath();
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath(str_replace('/delete', '', $path), $langcode);

    $has_access = FALSE;
    foreach ($user_paths as $allowed_path) {
      if (strpos($path_alias, $allowed_path) === 0) {
        $has_access = TRUE;
        break;
      }
    }

    if (!$has_access) {
      $redirect = new RedirectResponse(Url::fromUserInput('/permissions_by_path_notice')->toString());
      $redirect->send();
    }
  }
}

/**
 * Custom form validation handler for Permissions by Path.
 */
function permissions_by_path_form_validate(&$form, FormStateInterface $form_state) {
  // Check if "Generate automatic URL alias" is checked.
  if (!empty($form_state->getValue('path')[0]['pathauto'])) {
    $form_state->setErrorByName('path][0][pathauto', t('You are required to manually add a path! Uncheck this checkbox and add a custom URL alias below.'));
    return;
  }

  $current_user = \Drupal::currentUser();
  $user = \Drupal\user\Entity\User::load($current_user->id());
  $username = $user ? $user->getAccountName() : '';
  $config = \Drupal::config('permissions_by_path.settings');

  // Build the list of paths this user has access to.
  $user_paths = [];
  $path_permissions = $config->get('path_permissions') ?: [];
  foreach ($path_permissions as $mapping) {
    if (!empty($mapping['path']) && !empty($mapping['users']) && in_array($username, $mapping['users'], TRUE)) {
      $user_paths[] = $mapping['path'];
    }
  }

  $url_alias_path = $form_state->getValue('path')[0]['alias'];
  $has_access = FALSE;

  foreach ($user_paths as $allowed_path) {
    if (strpos($url_alias_path, $allowed_path) === 0) {
      // Check for valid subpath (must be at start or followed by '/').
      $remaining = substr($url_alias_path, strlen($allowed_path));
      if ($remaining === '' || $remaining[0] === '/') {
        $has_access = TRUE;
        break;
      }
    }
  }

  if (!$has_access) {
    $list_of_paths = '<ul>';
    foreach ($user_paths as $allowed_path) {
      $list_of_paths .= '<li><strong>' . $allowed_path . '/</strong><i>new_page_name</i></li>';
    }
    $list_of_paths .= '</ul>';
    $message = Markup::create("You don't have access to use this URL alias.<br>Make sure to use a URL alias that starts with:$list_of_paths");
    $form_state->setErrorByName('path][0][alias', $message);
  }
}
